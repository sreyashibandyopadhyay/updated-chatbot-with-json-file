# -*- coding: utf-8 -*-
"""chatbot.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1P0S4M6DcPOK8jF8hAXyfUMqEiXdcvu8m
"""

import json

  
# Data to be written
dictionary={"intents": [
        {"tag": "intro to machine learning",
         "patterns": ["what is machine learning", "define machine learning", "i want to know more about machine learning", "what is ml", "define ml"],
         "responses": ["""
         Machine learning is the study of computer algorithms
          that improve automatically through experience 
          and by the use of data. It is seen as a 
          part of artificial intelligence.
          """],
         "context_set": ""
        },
        {"tag": "intro to artificial intelligence",
         "patterns": ["what is ai", "define ai", "what is artificial intelligence", "define artificial intelligence"],
         "responses": ["""
         Artificial intelligence is intelligence demonstrated by machines,
          unlike the natural intelligence displayed 
          by humans and animals, which involves
           consciousness and emotionality.
           """],
         "context_set": ""
        },
        {"tag": "intro to deep learning",
         "patterns": ["what is deep learning", "define deep learning"],
         "responses": ["""
         Deep learning is an artificial intelligence (AI) function 
         that imitates the workings of the human brain in processing 
         data and creating patterns for use in decision making.
          Deep learning is a subset of machine learning in artificial intelligence 
          that has networks capable of learning unsupervised from data
          that is unstructured or unlabeled. Also known as deep neural learning
          or deep neural network. 
            """],
         "context_set": ""
        },
        {"tag": "difference between machine learning and deep learning",
         "patterns": ["what is the difference between machine learning and deep learning","differentiate between machine learning and deep learning"],
         "responses": ["""
          Deep learning, a subset of machine learning, 
          utilizes a hierarchical level of artificial
           neural networks to carry out the process
          of machine learning. The artificial neural networks
           are built like the human brain, with neuron nodes 
           connected together like a web.
            While traditional programs build analysis with data in a linear way, 
            the hierarchical function of deep learning systems 
            enables machines to process data with a nonlinear approach.
          """],
         "context_set": ""
        },
        {"tag": "name of machine learning algorithms",
         "patterns": ["name some machine learning algorithms", "what are some machine learning algorithms"],
         "responses": ["""
                            Linear Regression.
                            Logistic Regression.
                            Decision Tree.
                            SVM.
                            Naive Bayes.
                            kNN.
                            K-Means.
                            Random Forest.
                            """],
         "context_set": ""
        },
        {"tag": "classification of ml algorithm",
         "patterns": ["classify machine learning algorithms", "classification of machine learning algorithms"],
         "responses": ["supervised,unsupervised and reinforcement learning"],
         "context_set": ""
        },
        {"tag": "supervised learning",
         "patterns": ["what is supervised learning","define supervised learning"],
         "responses": ["""
          Supervised learning allows collecting data
          and produces data output from previous experiences. 
          Helps to optimize performance criteria 
          with the help of experience.
           Supervised machine learning helps 
           to solve various types of real-world 
           computation problems.
           """],
         "context_set": ""
        },
        {"tag": "unsupervised learning",
         "patterns": ["what is unsupervised learning","define unsupervised learning"],
         "responses": ["""
          Unsupervised Learning is a machine learning technique
           in which the users do not need to supervise the model.
            Instead, it allows the model to work on its own to discover
             patterns and information that was previously undetected.
              It mainly deals with the unlabelled data.
           """],
         "context_set": ""
        },
        {"tag": "reinforcement learning",
         "patterns": ["what is reinforcement learning","define reinforcement learning"],
         "responses": ["""
          Reinforcement learning (RL) is an area of machine learning 
          concerned with how intelligent agents ought to take actions 
          in an environment in order to maximize the notion of cumulative reward.
           Reinforcement learning is one of three basic machine learning paradigms,
            alongside supervised learning and unsupervised learning.
           """],
         "context_set": ""
        },
        {"tag": "linear regresion",
         "patterns": ["what is linear regression","define linear regression"],
         "responses": ["""
          Linear Regression is a machine learning algorithm based on supervised learning. 
          It performs a regression task. Regression models a target prediction value based 
          on independent variables. It is mostly used for finding out the relationship 
          between variables and forecasting.
           """],
         "context_set": ""
        },
        {"tag": "logistic regresion",
         "patterns": ["what is logistic regression","define logistic regression"],
         "responses": ["""
          Logistic regression is a supervised learning 
          classification algorithm used to predict the probability 
          of a target variable. 
          The nature of target or dependent variable is dichotomous, 
          which means there would be only two possible classes.
           """],
         "context_set": ""
        },
        {"tag": "svm",
         "patterns": ["what is svm","what is support vector model"],
         "responses": ["""
          The goal of SVM is to identify an optimal separating hyperplane
           which maximizes the margin between different classes of the
           training data.(SVM) is a supervised machine learning algorithm
            which can be used for both classification or regression challenges. 
            However, it is mostly used in classification problems.
           """],
         "context_set": ""
        },
        {"tag": "decision tree",
         "patterns": ["what is decision tree algorithm","define decision tree"],
         "responses": ["""
          Decision tree uses the tree representation to solve 
          the problem in which each leaf node corresponds to a class label 
          and attributes are represented on the internal node of the tree.
         We can represent any boolean function on discrete attributes using the decision tree.
           """],
         "context_set": ""
        },
        {"tag": "naive bayes",
         "patterns": ["what is naive bayes algorithm","define naive bayes"],
         "responses": ["""
          Naive Bayes is a probabilistic machine learning algorithm
           that can be used in a wide variety of classification tasks.
           Typical applications include filtering spam, 
           classifying documents, sentiment prediction etc. 
           It is based on the works of Rev. Thomas Bayes
           """],
         "context_set": ""
        },
       {"tag": "naive bayes",
         "patterns": ["what is naive bayes algorithm","define naive bayes"],
         "responses": ["""
          Naive Bayes is a probabilistic machine learning algorithm
           that can be used in a wide variety of classification tasks.
           Typical applications include filtering spam, 
           classifying documents, sentiment prediction etc. 
           It is based on the works of Rev. Thomas Bayes
           """],
         "context_set": ""
        },
        {"tag": "knn",
         "patterns": ["what is knn algorithm","define knn","what is k nearest neighbour"],
         "responses": ["""
          K-Nearest Neighbors (KNN) is one of the simplest algorithms used in Machine Learning
           for regression and classification problem. KNN algorithms 
          use data and classify new data points based on similarity measures 
          (e.g. distance function). 
          Classification is done by a majority vote to its neighbors.
           """],
         "context_set": ""
        },
        {"tag": "k means",
         "patterns": ["what is k means algorithm","define k means"],
         "responses": ["""
         K-means clustering is one of the simplest and popular unsupervised machine learning algorithms.
         In other words, the K-means algorithm identifies
          k number of centroids, and then allocates every data point 
          to the nearest cluster, while keeping the centroids as small as possible.
           """],
         "context_set": ""
        },
        {"tag": "random forest",
         "patterns": ["what is random forest algorithm","define random forest"],
         "responses": [""" 
         Random forests or random decision forests are an ensemble learning method for 
         classification, regression and other tasks that operate by constructing 
         a multitude of decision trees at training time and outputting the class 
         that is the mode of the classes or mean/average prediction of the individual trees.
        """],
         "context_set": ""
        },
        {"tag": "application",
         "patterns": ["what are some applications of machine learning","where is machine learning used"],
         "responses": [""" 
             Traffic Alerts.
             Social Media.
            Transportation and Commuting.
            Products Recommendations.
            Virtual Personal Assistants.
            Self Driving Cars.
            Dynamic Pricing.
            Google Translate.
        
        """],
         "context_set": ""
        }

   ]
}
  
with open("intents.json", "w") as botdata:
    json.dump(dictionary,botdata)

#loading json data
with open("intents.json") as file:
  data=json.load(file)

import nltk  #natural language toolkit library

from nltk.stem import WordNetLemmatizer
#lemmatizer stems root word



import numpy as np
import tensorflow as tf
import random

from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import Dense, Activation, Dropout
from tensorflow.keras.optimizers import SGD

nltk.download('punkt',quiet=True )

nltk.download('wordnet')

import pickle
#save as pkl file for later use

print(data)

lemmatizer=WordNetLemmatizer()

intents=json.loads(open("intents.json").read())

words =[]
classes = []
documents = []
ignore_letters = ['!', '?', ',', '.']

#looping through the data
#if pattern found add to word list

for intent in intents['intents']:
            for pattern in intent['patterns']:
                word_list = nltk.word_tokenize(pattern)
                words.extend(word_list)
                documents.append((word_list, intent['tag']))
                if intent['tag'] not in classes:
                    classes.append(intent['tag'])

print(documents)

words=[lemmatizer.lemmatize(word) for word in words if word not in ignore_letters]

words=sorted(set(words))

print(words)

classes=sorted(set(classes))

pickle.dump(words,open('words.pkl','wb'))

pickle.dump(classes,open('classes.pkl','wb'))

#training and creating the model data

training=[]
output_empty=[0] *len(classes)

len(output_empty)

#creating bag of 0 and 1 corresponding tothe listof words, if word found put 1 else put 0

for document in documents:
  bag=[]
  word_patterns=document[0]
  word_patterns=[lemmatizer.lemmatize(word.lower())for word in word_patterns]
  for word in words:
    bag.append(1) if word in word_patterns else bag.append(0)
  output_row=list(output_empty)
  output_row[classes.index(document[1])] = 1
  training.append([bag,output_row])

#changing to ndarray to feed to model

random.shuffle(training)
training=np.array(training)

train_x=list(training[:,0])
train_y=list(training[:,1])

#Sequence Modeling is the task of predicting what word/letter comes next.

model=Sequential()

model.add(Dense(128, input_shape=(len(train_x[0]),), activation='relu'))
model.add(Dropout(0.5))
model.add(Dense(64, activation='relu'))
model.add(Dropout(0.5))
model.add(Dense(len(train_y[0]), activation='softmax'))

sgd=SGD(lr=0.01,decay=1e-6,momentum=0.9,nesterov=True)
model.compile(loss='categorical_crossentropy', optimizer=sgd,metrics=['accuracy'])

model.fit(np.array(train_x),np.array(train_y),epochs=200,batch_size=5,verbose=1)
model.save('chatbot.model')

def clean_up_sentence(sentence):
  sentence_words=nltk.word_tokenize(sentence)
  sentence_words = [lemmatizer.lemmatize(word.lower()) for word in sentence_words]
  return sentence_words

def bag_of_words(sentence):
  sentence_words=clean_up_sentence(sentence)
  bag = [0] * len(words)
  for w in sentence_words:
      for i, word in enumerate(words):
          if word == w:
              bag[i] = 1
  return np.array(bag)

def predict_class(sentence):
  bow=bag_of_words(sentence)
  res =model.predict(np.array([bow]))[0]
  ERROR_THRESHOLD=0.25
  results = [[i, r] for i, r in enumerate(res) if r > ERROR_THRESHOLD]
  results.sort(key=lambda x: x[1], reverse=True)
  return_list = []
  for r in results:
    return_list.append({'intent':classes[r[0]], 'probability': str(r[1])})
  return return_list

def get_response(intents_list,intents_json):
  tag = intents_list[0]['intent']
  list_of_intents = intents_json['intents']
  for i in list_of_intents:
     if i['tag']  == tag:
        result = random.choice(i['responses'])
        break
       
  return result

hist=model.fit(np.array(train_x),np.array(train_y),epochs=200,batch_size=5,verbose=1)

model.save('chatbot_model.h5',hist)



intents

while(True):
  message=input("")
  ints=predict_class(message)
  res=get_response(ints,intents)
  print(res)

intent

